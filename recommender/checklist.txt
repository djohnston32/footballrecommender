 TODO
+ Produce list of ongoing Games from json Scoreboard response
    + Create skeleton python object for a game
    + Extract individual games from json Scoreboard response
    + Write constructor for python Game object that takes in a json game object

+ Create pretty print method for Game

+ Sort Game list into proper priority
    + Create basic weighting for Game object
    + Weight based only on time remaining
    + Figure out how to sort objects in python

x Produce and sort list with every response
    x Test execution time of algorithm so far (less than 1 minute essential, less than 1 second ideal)
    x Pull from local data every minute, run algorithm, pretty print results
    ^ Optimize as necessary

+ <Optional> Use Materialize to improve look and feel

x Get working as web app
    x Make server get json from local file every minute and run getGameList
        x hardcode list of games in demo.html
        x get list of games once from log.txt and display
        x display each game as separate html element
        x request from local file repeatedly
        x request next sb object from local file each time
    x Request particular game from local gameList with localOne
    x Make input for seconds to wait between requests
    x Poll from NFL Scoreboard feed every minute and run getGameList
    x Make game display look nice

x Improve Weighting algorithm
    Note: may be better to create multiple versions of getPriority (e.g. getPriority0(), getPriority1())
    x time remaining
    x score
    x yard line
    x team records
    x General Tuning (see getPriority() method in Game.py)

x Implement basic user profiles
    x Create register and login pages (no authentication yet)
        x Include main option and demo option
    x Store username and password in database
    x Direct to app/demo after successful register/login
    x Display username at top of screen

x Personalize weights based on user input
    x Implement weighting in Game.py
    x Make too-high/too-low buttons under each game's display
        x Implement toJsonString() in Game.py
        x Send json string of game objects to client instead of printstrings
        x Convert old toString in python to javascript and execute on client
        x Insert buttons after every game
    x Make upvote/downvote add/subtract flat number to weight
        x Identify metric to weight differently
        x Send which metric to weight differently to server
        x Make weights save to user profile

x Make "actual" web app
    x Requests scoreboard every minute
    x Display details if no scoreboard
        x display simple "check back sunday" message

- Testing and adjusting
    x Use app throughout NFL Sundays
