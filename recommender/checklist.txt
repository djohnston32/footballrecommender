 TODO
+ Produce list of ongoing Games from json Scoreboard response
    + Create skeleton python object for a game
    + Extract individual games from json Scoreboard response
    + Write constructor for python Game object that takes in a json game object

+ Create pretty print method for Game

+ Sort Game list into proper priority
    + Create basic weighting for Game object
    + Weight based only on time remaining
    + Figure out how to sort objects in python

x Produce and sort list with every response
    x Test execution time of algorithm so far (less than 1 minute essential)
    x Pull from local data every minute, run algorithm, pretty print results
    ^ Optimize as necessary

+ <Optional> Use Materialize to improve look and feel

x Get working as web app
    x Make server get json from local file every minute and run getGameList
        x hardcode list of games in demo.html
        x get list of games once from log.txt and display
        x display each game as separate html element
        x request from local file repeatedly
        x request next sb object from local file each time
    x Request particular game from local gameList with localOne
    x Make input for seconds to wait between requests
    x Poll from NFL Scoreboard feed every minute and run getGameList
    x Make game display look nice

- Improve Weighting algorithm
    Note: may be better to create multiple versions of getPriority (e.g. getPriority0(), getPriority1())
    x time remaining
    x score
    x yard line
        <optional> consider whether trailing team has possession
    - team records
        <optional> weight games within division higher
    - General Tuning (see getPriority() method in Game.py)

x Implement basic user profiles
    x Create register and login pages (no authentication yet)
        x Include main option and demo option
    x Store username and password in database
    x Direct to app/demo after successful register/login
    x Display username at top of screen
    <optional> Ask for and save favorite teams

- Personalize weights based on user input ***Thursday 12/01 - Saturday 12/03***
    - Implement weighting in Game.py
    - Make up/down buttons next to each game's display
        x Implement toJsonString() in Game.py
    - Make upvote add flat number to weight for some amount of time
        - Make weights save to user profile
    <optional> Use fafreco23vorite teams in weighting

- Make "actual" web app ***Friday 12/02 - Saturday 12/03***
    - Requests scoreboard every minute on load
    - Display details if no scoreboard
        - display simple "check back sunday" message
        - display games on Sunday ranked by gametime
        - display games on Sunday also ranked by team record

<optional> Potential improvements to feedback feature ***Saturday 12/03***
    - Ask user basic questions on why game is in wrong spot (e.g. score not close enough, too much time, don't like teams)
    - Adjust weighting based on response

- Testing and adjusting ***Sunday 11/27 and Sunday 12/04***
    - Use app throughout NFL Sundays
    - Address problems as necessary

------------------------------------------------------------------------------------------------------------------------------
***Note***
    - Minimum Viable Product acheived at this point
    - Everything after is gravy
    - Sanding rough edges most important, then fine tuning to look more impressive

- General bug fixing ***Sunday 11/27 - Sunday 11/04***
    - Fix any remaining persistent bugs
    - Improve aspects that feel shoddy, but may not necessarily be bugs

- *Optional* Fine tuning
    - Continue to tune default weighting
    ^ Continue to tune feedback mechanism
    - Improve UI

- Prepare deliverables ***Sunday 11/27 - Sunday 12/04***
